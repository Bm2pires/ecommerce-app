package com.team6.ecommercebackend;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.hibernate.criterion.Order;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import com.team6.ecommercebackend.entities.OrderDetails;
import com.team6.ecommercebackend.entities.Orders;
import com.team6.ecommercebackend.entities.Products;
import com.team6.ecommercebackend.entities.User;
import com.team6.ecommercebackend.repositries.OrderDetailsRepository;
import com.team6.ecommercebackend.repositries.OrdersRepository;
import com.team6.ecommercebackend.repositries.ProductsRepository;
import com.team6.ecommercebackend.repositries.UserRepository;

@SpringBootTest
class EcommerceBackendApplicationTests {
	
	@Autowired
	UserRepository userRepo;
	@Autowired
	OrderDetailsRepository orderDetailsRepo;
	@Autowired
	OrdersRepository orderRepo;
	@Autowired
	ProductsRepository productRepo;

	@Test
	void contextLoads() {
	}
	
	@Test
	public void testAddUser() {
		LocalDate date = LocalDate.now();
		User user  = new User("test@email.com", "testpass", "Mr", "fname", "lname", date, "1234567899", "address", false);
		userRepo.save(user);
	}
	
	@Test
	public void testAddOrderDetails() {
		OrderDetails od = new OrderDetails();
		
		Orders o1 = new Orders();
//		o1.setProductsObj(new Products("laptop", "lenovo", "a laptop test", 123.00));
		o1.setProd_id(6L);
		o1.setQuantity(6);

		
		Orders o2 = new Orders();
//		o2.setProductsObj(new Products("computer", "dell", "a computer test", 122343.00));
		o2.setProd_id(4L);
		o2.setQuantity(9);

		
		od.addOrder(o1);
		od.addOrder(o2);
		
		od.setTotalPrice(100.00);
		od.setUserId(4L);
		
		orderDetailsRepo.save(od);
	
	}
	
	//Add @Transactional if you are using lazy laoding
	@Test
	public void testLoadCustomer() {
		Optional<OrderDetails> od = orderDetailsRepo.findById(11L);
		System.out.println("OrderDetails Id: "+od.get().getId());
		System.out.println("OrderDetails Userid: "+od.get().getUserId());
		System.out.println("OrderDetails total price: "+od.get().getTotalPrice());
		System.out.println(od.get().getOrdersList());
		List<Orders> oList= od.get().getOrdersList();
		for(Orders o: oList) {
			System.out.println(o.toString());;
		}

	}
	
	@Test
	public void testUpdateCustomer() {
		Optional<OrderDetails> od = orderDetailsRepo.findById(11L);
		od.get().setTotalPrice(5000.00);

	}

}
