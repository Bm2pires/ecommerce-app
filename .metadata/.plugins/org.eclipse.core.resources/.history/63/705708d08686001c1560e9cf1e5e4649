package com.ecommerce.spring.services;

import java.util.Optional;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ecommerce.spring.entities.Products;
import com.ecommerce.spring.entities.User;
import com.ecommerce.spring.repositories.ProductRepository;
import com.ecommerce.spring.reqresmodels.ProductEditRequestModel;
import com.ecommerce.spring.reqresmodels.ProductEditResponseModel;
import com.ecommerce.spring.reqresmodels.UserDetailRequestModel;
import com.ecommerce.spring.reqresmodels.UserDetailResponseModel;

@Service
public class ProductService {

	@Autowired
	ProductRepository prodRepo;

	public ProductEditResponseModel editProd(ProductEditRequestModel requestModel) {
		Optional<Products> product = prodRepo.findById(requestModel.getProductId());
		boolean valid = validateInput(requestModel);
		boolean duplicateEmail = checkUniqueFields(requestModel);
		if(valid && duplicateEmail) {
			if(product != null) {		
				product.get().setProductName(requestModel.getProductName());
				product.get().setProductDescription(requestModel.getProductDescription());
				product.get().setProductPrice(requestModel.getProductPrice());
				product.get().setBrand(requestModel.getBrand());
				product.get().setCategories(requestModel.getCategories());
				
				prodRepo.save(product.get());
				return new ProductEditResponseModel();
			}else {
				return null;
			}
		}else {
			return null;
		}

	}
	
	public boolean checkUniqueFields(ProductEditRequestModel requestModel) {
		boolean uniqueName = checkUniqueName(requestModel.getProductName(), requestModel.getProductId());
		boolean uniqueDesc = checkUniqueName(requestModel.getProductDescription(), requestModel.getProductId());

		if(uniqueName && uniqueDesc) {
			return true;
		}else {
			return false;
		}
	}
	
	public boolean checkUniqueName(String name, long id) {
		Optional<Products> prodCheck = prodRepo.findByProductName(name);
		if(prodCheck.get() == null) {
			return true;
		}else {
			if(prodCheck.get().getProductId() == id) {
				return true;
			}else {
				return false;
			}
		}
	}
	
	public boolean checkUniqueDesc(String desc, long id) {
		Optional<Products> prodCheck = prodRepo.findByProductName(desc);
		if(prodCheck.get() == null) {
			return true;
		}else {
			if(prodCheck.get().getProductId() == id) {
				return true;
			}else {
				return false;
			}
		}
	}
	
	public boolean validateInput(ProductEditRequestModel requestModel) {
		boolean validInput = true;
		if(requestModel.getProductName().length() > 50) {
			validInput = false;
		}
		if(requestModel.getProductDescription().length() > 250) {
			validInput = false;
		}
		if(requestModel.getProductPrice() == null) {
			validInput = false;
		}


		return validInput;
		
	}
}
